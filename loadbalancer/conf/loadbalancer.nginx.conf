# Setup logging to include request time and bytes sent, 
log_format pkgserver_logformat '$remote_addr [$time_local] "$request" $status $body_bytes_sent "$http_user_agent" $request_time $http_julia_version $http_julia_system "$http_julia_ci_variables" $http_julia_interactive "$http_julia_pkg_server" "$request_id" "$upstream_http_x_cache_miss"';

# This upstream uses `$request_uri` hashing to ensure that the same resource request goes to the same server
# this allows us to essentially shard the space of resources across servers
upstream pkgservers_hashed {
    hash $request_uri consistent;
${PKGSERVERS_SERVER_BLOCK}

    # keep at least 16 connections open at all times, to reduce the amount of
    # handshaking we do to our upstream nginx instances.
    keepalive 16;
}

# This upstream uses round-robin request handling
upstream pkgservers_roundrobin {
${PKGSERVERS_SERVER_BLOCK}

    keepalive 16;
}

server {
    listen              443 ssl;
    listen              [::]:443 ssl;
    http2               on;
    server_name         ${REGION}.pkg.julialang.org loadbalancer-${REGION}.ip.cflo.at loadbalancer-${REGION}.ipv4.cflo.at loadbalancer-${REGION}.ipv6.cflo.at;
    # server_name         loadbalancer-${REGION}.ip.cflo.at loadbalancer-${REGION}.ipv4.cflo.at loadbalancer-${REGION}.ipv6.cflo.at;
    ssl_certificate     /etc/letsencrypt/live/${FQDN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${FQDN}/privkey.pem;

    # We pass all content-addressed URLs off to consistent PkgServer locations,
    # so that each package server only needs to keep track of a portion of these resources
    location ~ /(registry|package|artifact|mirror)/ {
        return 301 https://storage.julialang.net$uri.tar.gz;
        # proxy_next_upstream error timeout http_502;
        # set $upstream pkgservers_hashed;
        # try_files $uri @loadbalance;
    }
    # Everything else (`/registries`, `/meta`, etc...) gets round-robined
    location / {
        proxy_next_upstream error timeout;
        set $upstream pkgservers_roundrobin;
        try_files $uri @loadbalance;
    }

    # Add special "/meta/children" endpoint that surfaces how many child servers there are
    location =/meta/children {
        alias /etc/nginx/children.json;
        add_header Content-Type "application/json";
    }

    # This is a trick to set common options to multiple `location` blocks.
    location @loadbalance {
        proxy_pass http://$upstream;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Request-ID $request_id;

        # Report to the requester which load balancing strategy we're using (e.g. round-robin or hashed)
        add_header X-lb-strategy $upstream;
    }

    access_log /logs/access_${FQDN}.log pkgserver_logformat buffer=4k flush=1m;
    error_log  /logs/error_${FQDN}.log;
}

# Expose basic status information on /stub_status to be consumed by nginx-prometheus-exporter
# https://nginx.org/en/docs/http/ngx_http_stub_status_module.html#stub_status
server {
    listen 8080;
    listen [::]:8080;
    location = /stub_status {
        stub_status;
    }
    location / {
        return 444;
    }
}
